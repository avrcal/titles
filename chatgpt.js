const modData = {
    "@title": "Generated by ChatGPT",
    "@description": "AI-generated modifications",
};

const tableData = {};
const chatBox = document.getElementById("chatBox");
const jsonDisplay = document.getElementById("jsonDisplay");

let apiKey = "";  // Store the decrypted API key

document.addEventListener("DOMContentLoaded", () => {
    fetchRowsAndColumns();
    fetchAPIKey();  // Fetch and decrypt the API key
});

// Fetch and decrypt the API key
function fetchAPIKey() {
    console.log("Fetching API key...");
    fetch('data/api_key.json')  // Path to your encrypted JSON file
        .then(response => response.json())
        .then(data => {
            const encryptedKey = data.encryptedKey;
            const iv = Buffer.from(data.iv, 'hex');  // Convert the IV from hex to bytes
            console.log("Encrypted Key and IV fetched:", encryptedKey, iv);
            decryptAPIKey(encryptedKey, iv, 'your_secret_passphrase')
                .then(decryptedKey => {
                    apiKey = decryptedKey;  // Use the decrypted key
                    appendAIMessage("API Key successfully decrypted.");
                    console.log("Decrypted API Key:", apiKey); // Log decrypted key
                })
                .catch(error => {
                    console.error("Decryption error:", error);
                    appendAIMessage("Failed to decrypt the API key.");
                });
        })
        .catch(error => {
            console.error("Error fetching the API key:", error);
            appendAIMessage("Failed to fetch or decrypt the API key.");
        });
}

// Decrypt the API Key using AES-256-CBC
async function decryptAPIKey(encryptedKey, iv, passphrase) {
    const decoder = new TextDecoder();
    
    // Convert encrypted key to a Uint8Array
    const encryptedBytes = Uint8Array.from(Buffer.from(encryptedKey, 'hex'));

    // Use the Web Crypto API to decrypt
    const key = await window.crypto.subtle.importKey(
        "raw",
        new TextEncoder().encode(passphrase),
        { name: "AES-CBC" },
        false,
        ["decrypt"]
    );

    const decryptedBytes = await window.crypto.subtle.decrypt(
        { name: "AES-CBC", iv: iv },
        key,
        encryptedBytes
    );

    // Convert the decrypted bytes to a string (UTF-8) and return it
    return decoder.decode(decryptedBytes);
}

function appendUserMessage(message) {
    const div = document.createElement("div");
    div.className = "user";
    div.textContent = message;
    chatBox.appendChild(div);
    chatBox.scrollTop = chatBox.scrollHeight;
}

function appendAIMessage(message) {
    const div = document.createElement("div");
    div.className = "ai";
    div.textContent = message;
    chatBox.appendChild(div);
    chatBox.scrollTop = chatBox.scrollHeight;
}

async function sendMessage() {
    const userInput = document.getElementById("userInput").value.trim();
    if (!userInput) return;

    appendUserMessage(userInput);
    document.getElementById("userInput").value = "";

    const systemPrompt = `
You are a JSON builder assistant. You will process user requests to modify JSON data. 
Here are the available tables, rows, and columns: ${JSON.stringify(tableData)}.
You must validate the user's input and provide valid JSON modifications. If a request is unclear, ask for clarification.
`;

    console.log("Sending message to ChatGPT...");

    const chatResponse = await fetchChatGPTResponse(systemPrompt, userInput);
    if (chatResponse.error) {
        appendAIMessage("Error: Unable to process your request.");
    } else {
        appendAIMessage(chatResponse.message);
        try {
            const modifications = JSON.parse(chatResponse.json);
            Object.assign(modData, modifications);
            updateJSONDisplay();
        } catch (error) {
            appendAIMessage("Error parsing the response JSON.");
        }
    }
}

async function fetchChatGPTResponse(systemPrompt, userInput) {
    if (!apiKey) {
        console.error("API key is missing.");
        return { error: true };
    }

    const apiUrl = "https://api.openai.com/v1/chat/completions";

    const messages = [
        { role: "system", content: systemPrompt },
        { role: "user", content: userInput },
    ];

    console.log("Making API request with the following messages:", messages);

    try {
        const response = await fetch(apiUrl, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${apiKey}`,
            },
            body: JSON.stringify({
                model: "gpt-4", // Change to "gpt-3.5-turbo" if gpt-4 is unavailable
                messages: messages,
            }),
        });

        if (!response.ok) {
            const errorData = await response.json();
            console.error("Error response:", errorData);
            document.getElementById("errorMessage").textContent = `Error: ${errorData.error.message}`;
            return { error: true };
        }

        const data = await response.json();
        if (data.choices && data.choices.length > 0) {
            return {
                message: data.choices[0].message.content,
                json: data.choices[0].message.content,
            };
        } else {
            document.getElementById("errorMessage").textContent = "No choices in response.";
            return { error: true };
        }
    } catch (error) {
        console.error("Error fetching ChatGPT response:", error);
        document.getElementById("errorMessage").textContent = `Error: ${error.message}`;
        return { error: true };
    }
}

function updateJSONDisplay() {
    jsonDisplay.textContent = JSON.stringify(modData, null, 4);
}
